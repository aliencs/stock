{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","stock","dailyPrices","setDailyPrices","tooltip","trigger","axisPointer","type","animation","formatter","params","name","value","xAxis","data","yAxis","axisLabel","min","max","interval","series","option","setOption","tabIndex","chartInstance","setChartInstance","useEffect","a","console","log","fetch","window","location","origin","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","results","readString","length","slice","map","el","i","parseInt","Math","floor","getData","className","JongName","ref","e","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mXAoIeA,MA3Ff,WAAgB,IAAD,EACaC,mBAAS,MADtB,mBACNC,EADM,aAEyBD,mBAAS,KAFlC,mBAENE,EAFM,KAEOC,EAFP,OAGeH,mBAnCJ,CACxBI,QAAS,CACPC,QAAS,OACTC,YAAa,CACXC,KAAM,QACNC,WAAW,GAEbC,UAAW,SAAUC,GACnB,MAAM,kBAAN,OAAeA,EAAO,GAAGC,KAAzB,gCAA2CD,EAAO,GAAGE,SAGzDC,MAAO,CACLN,KAAM,WACNO,KAAM,IAERC,MAAO,CACLR,KAAM,QACNS,UAAW,CACTP,UAAW,kBAEbQ,IAAK,EACLC,IAAK,EACLC,SAAU,GAEZC,OAAQ,CACN,CACEN,KAAM,GACNP,KAAM,WAKG,mBAGNc,EAHM,KAGEC,EAHF,OAImBtB,mBAAS,GAJ5B,mBAINuB,EAJM,aAK6BvB,mBAAS,OALtC,mBAKNwB,EALM,KAKSC,EALT,KA8Db,OApDAC,qBAAU,WAAM,4CACd,4CAAAC,EAAA,6DACEC,QAAQC,IAAIL,GADd,SAQyBM,MAAM,GAAD,OACvBC,OAAOC,SAASC,OADO,2BAR9B,cAQQC,EARR,OAWQC,EAASD,EAASE,KAAKC,YAX/B,SAYuBF,EAAOG,OAZ9B,OAYQC,EAZR,OAaQC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAO3B,OAC5BgC,EAAUC,YAAWH,GAC3Bd,QAAQC,IAAI,+BACZD,QAAQC,IAAIe,GACZhB,QAAQC,IAAI,+BACZ1B,EAAeyC,EAAQ9B,MAEjBgC,EAASF,EAAQ9B,KAAKgC,OACtBhC,EAAO8B,EAAQ9B,KAClBiC,MAAM,EAAGD,EAAS,GAClBE,KAAI,SAACC,EAAIC,GAAL,OAAWC,SAASF,EAAG,GAAI,OAC5B9B,EAAWiC,KAAKC,OACnBD,KAAKlC,IAAL,MAAAkC,KAAI,YAAQtC,IAAQsC,KAAKnC,IAAL,MAAAmC,KAAI,YAAQtC,IAAQ,KAAS,GAEpDc,QAAQC,IAAIR,GACZC,EAAU,eACLD,EADI,CAEPR,MAAM,eACDQ,EAAOR,MADP,CAEHC,KAAM8B,EAAQ9B,KAAKiC,MAAM,EAAGD,EAAS,GAAGE,KAAI,SAACC,GAAD,OAAQA,EAAG,QAEzDlC,MAAM,eACDM,EAAON,MADP,CAEHE,IAAKmC,KAAKnC,IAAL,MAAAmC,KAAI,YAAQtC,IAAQK,EACzBD,IAAKkC,KAAKlC,IAAL,MAAAkC,KAAI,YAAQtC,IAAQK,EACzBA,SAAUA,IAEZC,OAAO,eACFC,EAAOD,OADN,CAEJN,KAAM8B,EAAQ9B,KACXiC,MAAM,EAAGD,EAAS,GAClBE,KAAI,SAACC,GAAD,OAAQE,SAASF,EAAG,GAAI,YA7CrC,6CADc,uBAAC,WAAD,wBAkDdK,KACC,CAAC/B,IAEF,yBAAKgC,UAAU,OACZtD,GAAS,6BAAMA,EAAMuD,UAoBrBtD,GACC,kBAAC,IAAD,CAAcuD,IAAK,SAACC,GAAD,OAAOjC,EAAiBiC,IAAIrC,OAAQA,MClH3CsC,QACW,cAA7B5B,OAAOC,SAAS4B,UAEe,UAA7B7B,OAAOC,SAAS4B,UAEhB7B,OAAOC,SAAS4B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.3c0d2b06.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactEcharts from \"echarts-for-react\";\n\nimport { readString, CSVReader } from \"react-papaparse\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport \"./App.css\";\n\nconst getOptions = () => ({\n  tooltip: {\n    trigger: \"axis\",\n    axisPointer: {\n      type: \"cross\",\n      animation: false,\n    },\n    formatter: function (params) {\n      return `날짜 : ${params[0].name} <br> 가격 : ${params[0].value}`;\n    },\n  },\n  xAxis: {\n    type: \"category\",\n    data: [],\n  },\n  yAxis: {\n    type: \"value\",\n    axisLabel: {\n      formatter: \"{value} 원\",\n    },\n    min: 0,\n    max: 0,\n    interval: 0,\n  },\n  series: [\n    {\n      data: [],\n      type: \"line\",\n    },\n  ],\n});\n\nfunction App() {\n  const [stock, setStock] = useState(null);\n  const [dailyPrices, setDailyPrices] = useState([]);\n  const [option, setOption] = useState(getOptions());\n  const [tabIndex, setTabIndex] = useState(0);\n  const [chartInstance, setChartInstance] = useState(null);\n\n  const aa = (index) => {\n    setTabIndex(index);\n  };\n  useEffect(() => {\n    async function getData() {\n      console.log(chartInstance);\n\n      // if (chartInstance) {\n      //   chartInstance.dispose();\n      // }\n\n      // if (chartInstance) chartInstance.getEchartsInstance().clear();\n      const response = await fetch(\n        `${window.location.origin}/stock/data/000720.csv`\n      );\n      const reader = response.body.getReader();\n      const result = await reader.read(); // raw array\n      const decoder = new TextDecoder(\"utf-8\");\n      const csv = decoder.decode(result.value); // the csv text\n      const results = readString(csv);\n      console.log(\"---------------------------\");\n      console.log(results);\n      console.log(\"---------------------------\");\n      setDailyPrices(results.data);\n\n      const length = results.data.length;\n      const data = results.data\n        .slice(1, length - 1)\n        .map((el, i) => parseInt(el[4], 10));\n      const interval = Math.floor(\n        (Math.max(...data) - Math.min(...data) + 10000) / 5\n      );\n      console.log(option);\n      setOption({\n        ...option,\n        xAxis: {\n          ...option.xAxis,\n          data: results.data.slice(1, length - 1).map((el) => el[0]),\n        },\n        yAxis: {\n          ...option.yAxis,\n          min: Math.min(...data) - interval,\n          max: Math.max(...data) + interval,\n          interval: interval,\n        },\n        series: {\n          ...option.series,\n          data: results.data\n            .slice(1, length - 1)\n            .map((el) => parseInt(el[4], 10)),\n        },\n      });\n    }\n    getData();\n  }, [tabIndex]);\n  return (\n    <div className=\"App\">\n      {stock && <div>{stock.JongName}</div>}\n\n      {/*<Tabs onSelect={aa}>\n        <TabList>\n          <Tab>Title 1</Tab>\n          <Tab>Title 2</Tab>\n        </TabList>\n\n        <TabPanel>\n          {dailyPrices && (\n            <ReactEcharts ref={(e) => setChartInstance(e)} option={option} />\n          )}\n        </TabPanel>\n        <TabPanel>\n          <h2>Any content 2</h2>\n        </TabPanel>\n      </Tabs>\n\n      */}\n\n      {dailyPrices && (\n        <ReactEcharts ref={(e) => setChartInstance(e)} option={option} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}