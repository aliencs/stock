{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["stock_list","stockName_list","App","useState","isLoaded","setLoaded","legend","data","tooltip","trigger","axisPointer","type","animation","xAxis","yAxis","axisLabel","formatter","series","option","setOption","useEffect","fetchDataFromCsv","stockNumber","a","fetch","window","location","origin","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","readString","stockData","fetchAllData","forEach","number","push","Promise","all","then","minValue","maxValue","interval","index","stock","length","priceList","slice","map","el","parseInt","Math","min","max","floor","name","console","log","getData","className","i","style","height","width","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.396a9750.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactEcharts from \"echarts-for-react\";\n\nimport { readString } from \"react-papaparse\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport \"./App.css\";\n\nconst stock_list = [\"005930\", \"066570\", \"005490\", \"035720\", \"293490\", \"068760\"];\nconst stockName_list = [\n  \"삼성전자\",\n  \"LG전자\",\n  \"POSCO\",\n  \"카카오\",\n  \"카카오게임즈\",\n  \"셀트리온제약\",\n];\nconst getOptions = () => ({\n  legend: {\n    data: stock_list,\n  },\n  tooltip: {\n    trigger: \"axis\",\n    axisPointer: {\n      type: \"cross\",\n      animation: false,\n    },\n    // formatter: function (params) {\n    //   console.log(params);\n    //   return `날짜 : ${params[0].name} <br> 가격 : ${params[0].value} <br> 종목 :  ${params[0].seriesName}`;\n    // },\n  },\n  xAxis: {\n    type: \"category\",\n    data: [],\n  },\n  yAxis: {\n    type: \"value\",\n    axisLabel: {\n      formatter: \"{value} 원\",\n    },\n    // min: 0,\n    // max: 0,\n    // interval: 0,\n  },\n  series: [],\n});\n\nfunction App() {\n  const [stock, setStock] = useState(null);\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState(getOptions());\n\n  useEffect(() => {\n    async function fetchDataFromCsv(stockNumber) {\n      const response = await fetch(\n        `${window.location.origin}/stock/data/${stockNumber}.csv`\n      );\n      const reader = response.body.getReader();\n      const result = await reader.read(); // raw array\n      const decoder = new TextDecoder(\"utf-8\");\n      const csv = decoder.decode(result.value); // the csv text\n      return readString(csv);\n    }\n\n    function getData() {\n      // console.log(chartInstance);\n\n      // if (chartInstance) {\n      //   chartInstance.dispose();\n      // }\n\n      // if (chartInstance) chartInstance.getEchartsInstance().clear();\n\n      const stockData = {\n        ...option,\n        xAxis: {\n          ...option.xAxis,\n        },\n        yAxis: {\n          ...option.yAxis,\n        },\n        series: [...option.series],\n      };\n\n      const fetchAllData = [];\n      stock_list.forEach(async (number) => {\n        fetchAllData.push(fetchDataFromCsv(number));\n      });\n\n      Promise.all(fetchAllData).then((data) => {\n        let minValue;\n        let maxValue;\n        let interval;\n        data.forEach(({ data: stock }, index) => {\n          const length = stock.length;\n          const priceList = stock\n            .slice(1, length - 1)\n            .map((el) => parseInt(el[4], 10));\n\n          stockData.xAxis = {\n            ...stockData.xAxis,\n            data: stock.slice(1, length - 1).map((el) => el[0]),\n          };\n\n          minValue = minValue\n            ? Math.min(minValue, ...priceList)\n            : Math.min(...priceList);\n          maxValue = maxValue\n            ? Math.max(maxValue, ...priceList)\n            : Math.max(...priceList);\n\n          interval = Math.floor((maxValue - minValue + 10000) / 10);\n\n          stockData.yAxis = {\n            ...stockData.yAxis,\n            min: minValue - interval < 0 ? 0 : minValue - interval,\n            max: maxValue + interval,\n            interval: interval,\n          };\n\n          stockData.series.push({\n            data: stock.slice(1, length - 1).map((el) => parseInt(el[4], 10)),\n            type: \"line\",\n            name: stock_list[index],\n          });\n        });\n        setLoaded(true);\n        setOption(stockData);\n        console.log(stockData);\n      });\n    }\n    getData();\n  }, []);\n  return (\n    <div className=\"App\">\n      {stock_list &&\n        stock_list.map((el, i) => (\n          <div>{`종목이름 :${stockName_list[i]} // 종목코드 : ${el}`}</div>\n        ))}\n      {isLoaded && (\n        <ReactEcharts\n          style={{ height: \"700px\", width: \"100%\" }}\n          option={option}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}