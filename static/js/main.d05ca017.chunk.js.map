{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","stock","setStock","dailyPrices","setDailyPrices","xAxis","type","data","yAxis","axisLabel","formatter","min","max","interval","series","option","setOption","xml","XMLParser","useEffect","a","axios","get","then","res","children","parseFromString","console","log","attributes","map","el","parseInt","day_EndPrice","replace","day_Date","Math","fetchData","className","JongName","key","day_Volume","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"ycA8FeA,MAjEf,WAAgB,IAAD,EACaC,mBAAS,MADtB,mBACNC,EADM,KACCC,EADD,OAEyBF,mBAAS,IAFlC,mBAENG,EAFM,KAEOC,EAFP,OAGeJ,mBAzBJ,CACxBK,MAAO,CACLC,KAAM,WACNC,KAAM,IAERC,MAAO,CACLF,KAAM,QACNG,UAAW,CACTC,UAAW,kBAEbC,IAAK,EACLC,IAAK,EACLC,SAAU,GAEZC,OAAQ,CACN,CACEP,KAAM,GACND,KAAM,WAKG,mBAGNS,EAHM,KAGEC,EAHF,KAKTC,EAAM,IAAIC,IA4Cd,OA3CAC,qBAAU,YACO,uCAAG,sBAAAC,EAAA,sEACVC,IACHC,IACC,mGACA,CACE,eAAgB,mCAGnBC,MAAK,SAACC,GAAS,IACNC,EAAaR,EAAIS,gBAAgBF,EAAIjB,MAArCkB,SACRE,QAAQC,IAAIH,GACZE,QAAQC,IAAIH,EAAS,IACrBE,QAAQC,IAAIH,EAAS,GAAGA,UACxBvB,EAASuB,EAAS,GAAGI,YACrBzB,EAAeqB,EAAS,GAAGA,UAC3B,IAAMlB,EAAOkB,EAAS,GAAGA,SAASK,KAAI,SAACC,GAAD,OACpCC,SAASD,EAAGF,WAAWI,aAAaC,QAAQ,IAAK,IAAK,OAGxDlB,EAAU,eACLD,EADI,CAEPV,MAAM,eACDU,EAAOV,MADP,CAEHE,KAAMkB,EAAS,GAAGA,SAASK,KAAI,SAACC,GAAD,OAAQA,EAAGF,WAAWM,cAEvD3B,MAAM,eACDO,EAAOP,MADP,CAEHG,IAAKyB,KAAKzB,IAAL,MAAAyB,KAAI,YAAQ7B,IAAQ,IACzBK,IAAKwB,KAAKxB,IAAL,MAAAwB,KAAI,YAAQ7B,IAAQ,IACzBM,UAAWuB,KAAKxB,IAAL,MAAAwB,KAAI,YAAQ7B,IAAQ6B,KAAKzB,IAAL,MAAAyB,KAAI,YAAQ7B,IAAQ,KAAS,IAE9DO,OAAO,eACFC,EAAOD,OADN,CAEJP,KAAMkB,EAAS,GAAGA,SAASK,KAAI,SAACC,GAAD,OAC7BC,SAASD,EAAGF,WAAWI,aAAaC,QAAQ,IAAK,IAAK,eAlChD,2CAAH,qDAwCfG,KACC,IAED,yBAAKC,UAAU,OACZrC,GAAS,6BAAMA,EAAMsC,UACrBpC,GACCA,EAAY2B,KAAI,SAACC,GAAD,OACd,yBAAKS,IAAKT,EAAGF,WAAWY,YACtB,kCAAQV,EAAGF,WAAWM,UACtB,kCAAQJ,EAAGF,WAAWI,kBAG3B9B,GAAe,kBAAC,IAAD,CAAcY,OAAQA,IACrCA,GAAU2B,KAAKC,UAAU5B,KC7EZ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.d05ca017.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport krx from \"krx-stock-api\";\nimport axios from \"axios\";\nimport XMLParser from \"react-xml-parser\";\nimport ReactEcharts from \"echarts-for-react\";\nimport \"./App.css\";\n\nconst getOptions = () => ({\n  xAxis: {\n    type: \"category\",\n    data: [],\n  },\n  yAxis: {\n    type: \"value\",\n    axisLabel: {\n      formatter: \"{value} 원\",\n    },\n    min: 0,\n    max: 0,\n    interval: 0,\n  },\n  series: [\n    {\n      data: [],\n      type: \"line\",\n    },\n  ],\n});\n\nfunction App() {\n  const [stock, setStock] = useState(null);\n  const [dailyPrices, setDailyPrices] = useState([]);\n  const [option, setOption] = useState(getOptions());\n\n  let xml = new XMLParser();\n  useEffect(() => {\n    const fetchData = async () => {\n      await axios\n        .get(\n          \"https://cors-anywhere.herokuapp.com/http://asp1.krx.co.kr/servlet/krx.asp.XMLSiseEng?code=005930\",\n          {\n            \"Content-Type\": \"application/xml; charset=utf-8\",\n          }\n        )\n        .then((res) => {\n          const { children } = xml.parseFromString(res.data);\n          console.log(children);\n          console.log(children[0]);\n          console.log(children[0].children);\n          setStock(children[2].attributes);\n          setDailyPrices(children[0].children);\n          const data = children[0].children.map((el) =>\n            parseInt(el.attributes.day_EndPrice.replace(\",\", \"\"), 10)\n          );\n\n          setOption({\n            ...option,\n            xAxis: {\n              ...option.xAxis,\n              data: children[0].children.map((el) => el.attributes.day_Date),\n            },\n            yAxis: {\n              ...option.yAxis,\n              min: Math.min(...data) - 5000,\n              max: Math.max(...data) + 5000,\n              interval: (Math.max(...data) - Math.min(...data) + 10000) / 5,\n            },\n            series: {\n              ...option.series,\n              data: children[0].children.map((el) =>\n                parseInt(el.attributes.day_EndPrice.replace(\",\", \"\"), 10)\n              ),\n            },\n          });\n        });\n    };\n    fetchData();\n  }, []);\n  return (\n    <div className=\"App\">\n      {stock && <div>{stock.JongName}</div>}\n      {dailyPrices &&\n        dailyPrices.map((el) => (\n          <div key={el.attributes.day_Volume}>\n            <span> {el.attributes.day_Date}</span>\n            <span> {el.attributes.day_EndPrice}</span>\n          </div>\n        ))}\n      {dailyPrices && <ReactEcharts option={option} />}\n      {option && JSON.stringify(option)}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}