{"version":3,"sources":["routers/routes.js","routers/CommonRoute.js","constants/stock.js","components/NavBar/Navbar.styles.js","components/NavBar/NavBar.js","constants/chart.js","services/stock.js","utils/utils.js","components/StockChart/StockChart.js","pages/Stock/Stock.styles.js","pages/Stock/Stock.js","pages/Dashboard/Dashboard.styles.js","pages/Dashboard/Dashboard.js","App.styles.js","App.js","serviceWorker.js","index.js"],"names":["path","url","description","CommonRoute","children","rest","stockList","name","code","Container","styled","div","flexColumnCenterX","StockList","StockItem","Link","StockText","Chip","active","css","NavBar","pathname","useLocation","stock","Routes","root","to","map","el","key","chartOption","xAxis","yAxis","series","chartStyle","height","width","fetchStockDataFromCsv","stockNumber","a","fetch","window","location","origin","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","readString","getRelativePercent","target","number","parseInt","Math","round","defaultOption","legend","data","tooltip","trigger","axisPointer","type","animation","axisLabel","formatter","StockChart","chartData","style","useState","isLoaded","setLoaded","option","setOption","useEffect","Stock","stockCode","useRouteMatch","params","optionPercent","setOptionPercent","stockData","stockDataPercent","length","slice","find","getData","Dashboard","optionHigh","setOptionHigh","optionLow","setOptionLow","stockDataHigh","stockDataLow","fetchAllData","forEach","push","Promise","all","then","index","priceList","mean","min","max","ref","AppBody","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2ac21635.chunk.js","sourcesContent":["const root = {\n  path: '/stock',\n  url: '/stock',\n  description: 'Main Page',\n};\n\nconst stock = {\n  path: '/stock/code/:code',\n  url: '/stock/code/',\n  description: 'Stock Page',\n};\n\nexport default {\n  root,\n  stock,\n};\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst CommonRoute = ({ children, path, ...rest }) => {\n  return (\n    <Route path={path} {...rest}>\n      {children}\n    </Route>\n  );\n};\n\nexport default CommonRoute;\n","export const stockList = [\n  { name: \"삼성전자\", code: \"005930\" },\n  { name: \"SK하이닉스\", code: \"000660\" },\n  { name: \"NAVER\", code: \"035420\" },\n  { name: \"삼성바이오로직스\", code: \"207940\" },\n  { name: \"LG화학\", code: \"051910\" },\n  { name: \"셀트리온\", code: \"068270\" },\n  { name: \"삼성전자우\", code: \"005935\" },\n  { name: \"삼성SDI\", code: \"006400\" },\n  { name: \"카카오\", code: \"035720\" },\n  { name: \"현대차\", code: \"005380\" },\n  { name: \"LG생활건강\", code: \"051900\" },\n  { name: \"현대모비스\", code: \"012330\" },\n  { name: \"삼성물산\", code: \"028260\" },\n  { name: \"엔씨소프트\", code: \"036570\" },\n  { name: \"SK\", code: \"034730\" },\n  { name: \"삼성전기\", code: \"009150\" },\n  { name: \"삼성에스디에스\", code: \"018260\" },\n  { name: \"KB금융\", code: \"105560\" },\n  { name: \"기아차\", code: \"000270\" },\n  { name: \"SK이노베이션\", code: \"096770\" },\n  { name: \"대상\", code: \"001680\" },\n  { name: \"농심\", code: \"004370\" },\n  { name: \"휴비스\", code: \"079980\" },\n  { name: \"하이트진로\", code: \"000080\" },\n];\n","import styled, { css } from 'styled-components';\nimport { Chip, flexColumnCenterX } from 'remember-ui';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n\nexport const StockList = styled.div``;\nexport const StockItem = styled(Link)`\n  display: inline-block;\n  margin: 5px;\n  cursor: pointer;\n  text-decoration: none;\n`;\nexport const StockText = styled(Chip)`\n  ${({ active }) =>\n    active &&\n    css`\n      font-weight: bold;\n    `}\n  &:hover,\n  &:focus {\n    font-weight: bold;\n  }\n`;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { stockList } from 'constants/stock';\nimport Routes from 'routers//routes';\n\nimport { Container, StockList, StockItem, StockText } from './Navbar.styles';\n\nconst NavBar = () => {\n  const { pathname } = useLocation();\n  const { stock, root } = Routes;\n\n  return (\n    <Container>\n      <StockList>\n        <StockItem to={`${root.path}`}>\n          <StockText active={pathname === `${root.path}`}>\n            {`${root.description}`}\n          </StockText>\n        </StockItem>\n        {stockList &&\n          stockList.map((el) => (\n            <StockItem key={el.code} to={`${stock.url}${el.code}`}>\n              <StockText active={pathname === `${stock.url}${el.code}`}>\n                {`${el.name} (${el.code})`}\n              </StockText>\n            </StockItem>\n          ))}\n      </StockList>\n    </Container>\n  );\n};\n\nexport default NavBar;\n","export const chartOption = { xAxis: {}, yAxis: {}, series: [] };\nexport const chartStyle = { height: '700px', width: '100%' };\n","import { readString } from 'react-papaparse';\n\nimport { getRoundTwoPrecision } from 'utils/utils';\n\nexport const fetchStockDataFromCsv = async (stockNumber) => {\n  const response = await fetch(\n    `${window.location.origin}/stock/data/${stockNumber}.csv`\n  );\n  const reader = response.body.getReader();\n  const result = await reader.read(); // raw array\n  const decoder = new TextDecoder('utf-8');\n  const csv = decoder.decode(result.value); // the csv text\n  return readString(csv);\n};\n\nexport const getRelativePercent = (target, value) => {\n  return getRoundTwoPrecision(\n    ((parseInt(value, 10) - parseInt(target, 10)) / parseInt(target, 10)) * 100\n  );\n};\n","export const getRoundTwoPrecision = (number) => Math.round(number * 100) / 100;\n","import React, { useEffect, useState } from 'react';\nimport ReactEcharts from 'echarts-for-react';\n\nimport { chartStyle } from 'constants/chart';\nimport { stockList } from 'constants/stock';\n\nconst defaultOption = {\n  legend: {\n    data: stockList.map((el) => `${el.name}/${el.code}`),\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      animation: false,\n    },\n    // formatter: function (params) {\n    //   console.log(params);\n    //   return `날짜 : ${params[0].name} <br> 가격 : ${params[0].value} <br> 종목 :  ${params[0].seriesName}`;\n    // },\n  },\n  xAxis: {\n    type: 'category',\n    data: [],\n  },\n  yAxis: {\n    type: 'value',\n    axisLabel: {\n      formatter: '{value} 원',\n    },\n    // min: 0,\n    // max: 0,\n    // interval: 0,\n  },\n  series: [],\n};\n\nconst StockChart = ({ chartData, style = { ...chartStyle } }) => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({ ...defaultOption });\n\n  useEffect(() => {\n    setOption({\n      legend: {\n        ...defaultOption.legend,\n      },\n      tooltip: {\n        ...defaultOption.tooltip,\n      },\n      xAxis: {\n        ...defaultOption.xAxis,\n        ...chartData.xAxis,\n      },\n      yAxis: {\n        ...defaultOption.yAxis,\n        ...chartData.yAxis,\n      },\n      series: [...defaultOption.series, ...chartData.series],\n    });\n    setLoaded(true);\n  }, [chartData]);\n\n  return <>{isLoaded && <ReactEcharts style={style} option={option} />}</>;\n};\n\nexport default StockChart;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\n\nimport { stockList } from 'constants/stock';\nimport { chartOption } from 'constants/chart';\nimport { fetchStockDataFromCsv, getRelativePercent } from 'services/stock';\nimport StockChart from 'components/StockChart/StockChart';\n\nimport { Container } from './Stock.styles';\n\nconst Stock = () => {\n  const {\n    params: { code: stockCode },\n  } = useRouteMatch();\n\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionPercent, setOptionPercent] = useState({\n    ...chartOption,\n  });\n\n  useEffect(() => {\n    const getData = async () => {\n      const stockData = { ...chartOption };\n      const stockDataPercent = { ...chartOption };\n      const { data: stock } = await fetchStockDataFromCsv(stockCode);\n\n      const { length } = stock;\n\n      stockData.xAxis = {\n        ...stockData.xAxis,\n        data: stock.slice(1, length - 1).map((el) => el[0]),\n      };\n      stockDataPercent.xAxis = {\n        ...stockDataPercent.xAxis,\n        data: stock.slice(1, length - 1).map((el) => el[0]),\n      };\n\n      stockData.yAxis = {\n        ...stockData.yAxis,\n      };\n      stockDataPercent.yAxis = {\n        ...stockDataPercent.yAxis,\n        axisLabel: {\n          formatter: '{value} %',\n        },\n      };\n\n      stockData.series = [\n        ...stockData.series,\n        {\n          data: stock.slice(1, length - 1).map((el) => parseInt(el[4], 10)),\n          type: 'line',\n          name: `${\n            stockList.find((el) => el.code === stockCode).name\n          }/${stockCode}`,\n        },\n      ];\n      stockDataPercent.series = [\n        ...stockDataPercent.series,\n        {\n          data: stock\n            .slice(1, length - 1)\n            .map((el) =>\n              getRelativePercent(parseInt(stock[1][4], 10), parseInt(el[4], 10))\n            ),\n          type: 'line',\n          name: `${\n            stockList.find((el) => el.code === stockCode).name\n          }/${stockCode}`,\n        },\n      ];\n\n      setOption(stockData);\n      setOptionPercent(stockDataPercent);\n      setLoaded(true);\n    };\n\n    getData();\n  }, [stockCode]);\n\n  return (\n    <Container>\n      {isLoaded && (\n        <StockChart\n          chartData={option}\n          style={{ height: '300px', width: '100%' }}\n        />\n      )}\n      {isLoaded && (\n        <StockChart\n          chartData={optionPercent}\n          style={{ height: '300px', width: '100%' }}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default Stock;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState } from 'react';\n\nimport { stockList } from 'constants/stock';\nimport { chartOption } from 'constants/chart';\nimport { fetchStockDataFromCsv } from 'services/stock';\nimport StockChart from 'components/StockChart/StockChart';\n\nimport { Container } from './Dashboard.styles';\n\nconst Dashboard = () => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionHigh, setOptionHigh] = useState({\n    ...chartOption,\n  });\n  const [optionLow, setOptionLow] = useState({\n    ...chartOption,\n  });\n\n  useEffect(() => {\n    const stockData = { ...chartOption };\n    const stockDataHigh = { ...chartOption };\n    const stockDataLow = { ...chartOption };\n    const fetchAllData = [];\n\n    stockList\n      .map((el) => el.code)\n      .forEach(async (number) => {\n        fetchAllData.push(fetchStockDataFromCsv(number));\n      });\n\n    Promise.all(fetchAllData).then((data) => {\n      data.forEach(({ data: stock }, index) => {\n        const { length } = stock;\n        const priceList = stock\n          .slice(1, length - 1)\n          .map((el) => parseInt(el[4], 10));\n\n        const mean = (Math.min(...priceList) + Math.max(...priceList)) / 2;\n        const ref =\n          // eslint-disable-next-line no-nested-ternary\n          mean > 200000\n            ? stockDataHigh\n            : mean < 100000\n            ? stockDataLow\n            : stockData;\n\n        ref.xAxis = {\n          ...ref.xAxis,\n          data: stock.slice(1, length - 1).map((el) => el[0]),\n        };\n\n        ref.yAxis = {\n          ...ref.yAxis,\n        };\n\n        ref.series = [\n          ...ref.series,\n          {\n            data: stock.slice(1, length - 1).map((el) => parseInt(el[4], 10)),\n            type: 'line',\n            name: `${stockList[index].name}/${stockList[index].code}`,\n          },\n        ];\n      });\n      setOption(stockData);\n      setOptionHigh(stockDataHigh);\n      setOptionLow(stockDataLow);\n      setLoaded(true);\n    });\n  }, []);\n\n  return (\n    <Container>\n      {isLoaded && <StockChart chartData={optionHigh} />}\n      {isLoaded && <StockChart chartData={option} />}\n      {isLoaded && <StockChart chartData={optionLow} />}\n    </Container>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const AppBody = styled.div`\n  height: 100%;\n`;\n","import React from 'react';\nimport { BrowserRouter, Redirect, Switch } from 'react-router-dom';\nimport { GlobalTheme } from 'remember-ui';\n\nimport Routes from 'routers//routes';\nimport CommonRoute from 'routers/CommonRoute';\nimport NavBar from 'components/NavBar/NavBar';\nimport Stock from 'pages/Stock/Stock';\nimport Dashboard from 'pages/Dashboard/Dashboard';\n\nimport { AppBody } from './App.styles';\n\nfunction App() {\n  const { root, stock } = Routes;\n\n  return (\n    <BrowserRouter>\n      <AppBody>\n        <GlobalTheme />\n        <NavBar />\n        <Switch>\n          <CommonRoute path={stock.path}>\n            <Stock />\n          </CommonRoute>\n          <CommonRoute path={root.path}>\n            <Dashboard />\n          </CommonRoute>\n          <Redirect to={root.path} />\n        </Switch>\n      </AppBody>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}