{"version":3,"sources":["routers/routes.js","routers/CommonRoute.js","constants/stock.js","components/NavBar/Navbar.styles.js","components/NavBar/NavBar.js","constants/chart.js","utils/utils.js","services/stock.js","components/StockChart/StockChart.js","pages/Stock/Stock.styles.js","pages/Stock/Stock.js","pages/Dashboard/Dashboard.styles.js","pages/Dashboard/Dashboard.js","App.styles.js","App.js","serviceWorker.js","index.js"],"names":["path","url","description","CommonRoute","children","rest","stockList","name","code","Container","styled","div","flexColumnCenterX","StockList","StockItem","Link","StockText","Chip","active","css","NavBar","pathname","useLocation","stock","Routes","root","to","map","el","key","chartOption","xAxis","yAxis","series","chartStyle","height","width","getRoundTwoPrecision","number","Math","round","fetchStockDataFromCsv","stockNumber","a","fetch","window","location","origin","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","readString","getRelative","maxValue","minValue","parseInt","defaultOption","legend","data","tooltip","trigger","axisPointer","type","animation","axisLabel","formatter","StockChart","chartData","onEvents","style","useState","isLoaded","setLoaded","option","setOption","useEffect","Stock","stockCode","useRouteMatch","params","optionPercent","setOptionPercent","optionRelative","setOptionRelative","startDate","setStartDate","percentTargetDate","setPercentTargetDate","stockData","stockDataPercent","stockDataRelative","stockAll","stockIndex","findIndex","slice","length","targetDateValue","find","min","max","target","getData","mask","required","onChange","e","date","newDate","Date","today","label","placeholder","click","Dashboard","optionHigh","setOptionHigh","optionExtraHigh","setOptionExtraHigh","optionLow","setOptionLow","stockDataHigh","stockDataExtraHigh","stockDataLow","fetchAllData","forEach","push","Promise","all","then","index","priceList","mean","ref","AppBody","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47614f78.chunk.js","sourcesContent":["const root = {\n  path: '/stock',\n  url: '/stock',\n  description: 'Main Page',\n};\n\nconst stock = {\n  path: '/stock/code/:code',\n  url: '/stock/code/',\n  description: 'Stock Page',\n};\n\nexport default {\n  root,\n  stock,\n};\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst CommonRoute = ({ children, path, ...rest }) => {\n  return (\n    <Route path={path} {...rest}>\n      {children}\n    </Route>\n  );\n};\n\nexport default CommonRoute;\n","export const stockList = [\n  { name: '삼성전자', code: '005930' },\n  { name: 'SK하이닉스', code: '000660' },\n  { name: 'NAVER', code: '035420' },\n  { name: '삼성바이오로직스', code: '207940' },\n  { name: 'LG화학', code: '051910' },\n  { name: '셀트리온', code: '068270' },\n  { name: '삼성전자우', code: '005935' },\n  { name: '삼성SDI', code: '006400' },\n  { name: '카카오', code: '035720' },\n  { name: '현대차', code: '005380' },\n  { name: 'LG생활건강', code: '051900' },\n  { name: '현대모비스', code: '012330' },\n  { name: '삼성물산', code: '028260' },\n  { name: '엔씨소프트', code: '036570' },\n  { name: 'SK', code: '034730' },\n  { name: '삼성전기', code: '009150' },\n  { name: '삼성에스디에스', code: '018260' },\n  { name: 'KB금융', code: '105560' },\n  { name: '기아차', code: '000270' },\n  { name: 'SK이노베이션', code: '096770' },\n  { name: '대상', code: '001680' },\n  { name: '농심', code: '004370' },\n  { name: '휴비스', code: '079980' },\n  { name: '하이트진로', code: '000080' },\n  { name: '일진머터리얼즈', code: '020150' },\n  { name: '에프에스티', code: '036810' },\n  { name: '삼영엠텍', code: '054540' },\n  { name: 'APPLE', code: 'AAPL' },\n];\n","import styled, { css } from 'styled-components';\nimport { Chip, flexColumnCenterX } from 'remember-ui';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n\nexport const StockList = styled.div``;\nexport const StockItem = styled(Link)`\n  display: inline-block;\n  margin: 5px;\n  cursor: pointer;\n  text-decoration: none;\n`;\nexport const StockText = styled(Chip)`\n  ${({ active }) =>\n    active &&\n    css`\n      font-weight: bold;\n    `}\n  &:hover,\n  &:focus {\n    font-weight: bold;\n  }\n`;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { stockList } from 'constants/stock';\nimport Routes from 'routers//routes';\n\nimport { Container, StockList, StockItem, StockText } from './Navbar.styles';\n\nconst NavBar = () => {\n  const { pathname } = useLocation();\n  const { stock, root } = Routes;\n\n  return (\n    <Container>\n      <StockList>\n        <StockItem to={`${root.path}`}>\n          <StockText active={pathname === `${root.path}`}>\n            {`${root.description}`}\n          </StockText>\n        </StockItem>\n        {stockList &&\n          stockList.map((el) => (\n            <StockItem key={el.code} to={`${stock.url}${el.code}`}>\n              <StockText active={pathname === `${stock.url}${el.code}`}>\n                {`${el.name} (${el.code})`}\n              </StockText>\n            </StockItem>\n          ))}\n      </StockList>\n    </Container>\n  );\n};\n\nexport default NavBar;\n","export const chartOption = { xAxis: {}, yAxis: {}, series: [] };\nexport const chartStyle = { height: '700px', width: '100%' };\nexport const chartStartDate = '2015-01-02';\n","export const getRoundTwoPrecision = (number) => Math.round(number * 100) / 100;\n","import { readString } from 'react-papaparse';\n\nimport { getRoundTwoPrecision } from 'utils/utils';\n\nexport const fetchStockDataFromCsv = async (stockNumber) => {\n  const response = await fetch(\n    `${window.location.origin}/stock/data/${stockNumber}.csv`\n  );\n  const reader = response.body.getReader();\n  const result = await reader.read(); // raw array\n  const decoder = new TextDecoder('utf-8');\n  const csv = decoder.decode(result.value); // the csv text\n  return readString(csv);\n};\n\nexport const getPercent = (target, value) => {\n  return getRoundTwoPrecision(\n    ((parseInt(value, 10) - parseInt(target, 10)) / parseInt(target, 10)) * 100\n  );\n};\n\nexport const getRelative = (maxValue, minValue, value) => {\n  return getRoundTwoPrecision(\n    ((parseInt(value, 10) - parseInt(minValue, 10)) /\n      (parseInt(maxValue, 10) - parseInt(minValue, 10))) *\n      100\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport ReactEcharts from 'echarts-for-react';\n\nimport { chartStyle } from 'constants/chart';\nimport { stockList } from 'constants/stock';\n\nconst defaultOption = {\n  legend: {\n    data: stockList.map((el) => `${el.name}/${el.code}`),\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      animation: false,\n    },\n    // formatter: function (params) {\n    //   console.log(params);\n    //   return `날짜 : ${params[0].name} <br> 가격 : ${params[0].value} <br> 종목 :  ${params[0].seriesName}`;\n    // },\n  },\n  xAxis: {\n    type: 'category',\n    data: [],\n  },\n  yAxis: {\n    type: 'value',\n    axisLabel: {\n      formatter: '{value} 원',\n    },\n    // min: 0,\n    // max: 0,\n    // interval: 0,\n  },\n  series: [],\n};\n\nconst StockChart = ({ chartData, onEvents, style = { ...chartStyle } }) => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({ ...defaultOption });\n\n  useEffect(() => {\n    setOption({\n      legend: {\n        ...defaultOption.legend,\n      },\n      tooltip: {\n        ...defaultOption.tooltip,\n      },\n      xAxis: {\n        ...defaultOption.xAxis,\n        ...chartData.xAxis,\n      },\n      yAxis: {\n        ...defaultOption.yAxis,\n        ...chartData.yAxis,\n      },\n      series: [...defaultOption.series, ...chartData.series],\n    });\n    setLoaded(true);\n  }, [chartData]);\n\n  return (\n    <>\n      {isLoaded && (\n        <ReactEcharts style={style} option={option} onEvents={onEvents} />\n      )}\n    </>\n  );\n};\n\nexport default StockChart;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { MaskingInput } from 'remember-ui';\n\nimport { stockList } from 'constants/stock';\nimport { chartOption, chartStartDate } from 'constants/chart';\nimport { fetchStockDataFromCsv, getPercent, getRelative } from 'services/stock';\nimport StockChart from 'components/StockChart/StockChart';\n\nimport { Container } from './Stock.styles';\n\nconst Stock = () => {\n  const {\n    params: { code: stockCode },\n  } = useRouteMatch();\n\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionPercent, setOptionPercent] = useState({\n    ...chartOption,\n  });\n  const [optionRelative, setOptionRelative] = useState({\n    ...chartOption,\n  });\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [percentTargetDate, setPercentTargetDate] = useState(startDate);\n\n  useEffect(() => {\n    const getData = async () => {\n      const stockData = { ...chartOption };\n      const stockDataPercent = { ...chartOption };\n      const stockDataRelative = { ...chartOption };\n\n      const { data: stockAll } = await fetchStockDataFromCsv(stockCode);\n      const stockIndex = stockAll.findIndex((el) => el[0] === startDate);\n\n      const stock = [stockAll[0], ...stockAll.slice(stockIndex)];\n      const { length } = stock;\n\n      const targetDateValue = stock.find((el) => el[0] === percentTargetDate)\n        ? parseInt(stock.find((el) => el[0] === percentTargetDate)[4], 10)\n        : stock[1][4];\n\n      const minValue = parseInt(\n        Math.min(\n          ...stock.slice(1, length - 1).map((el) => parseInt(el[4], 10))\n        ),\n        10\n      );\n      const maxValue = parseInt(\n        Math.max(\n          ...stock.slice(1, length - 1).map((el) => parseInt(el[4], 10))\n        ),\n        10\n      );\n\n      // x축\n      stockData.xAxis = {\n        ...stockData.xAxis,\n        data: stock.slice(1, length - 1).map((el) => el[0]),\n      };\n      stockDataPercent.xAxis = {\n        ...stockData.xAxis,\n      };\n      stockDataRelative.xAxis = {\n        ...stockData.xAxis,\n      };\n\n      // y축\n      stockData.yAxis = {\n        ...stockData.yAxis,\n        min: minValue,\n        max: maxValue,\n      };\n      stockDataPercent.yAxis = {\n        ...stockDataPercent.yAxis,\n        axisLabel: {\n          formatter: '{value} %',\n        },\n      };\n      stockDataRelative.yAxis = {\n        ...stockDataPercent.yAxis,\n      };\n\n      // series Data\n      stockData.series = [\n        ...stockData.series,\n        {\n          data: stock.slice(1, length - 1).map((el) => parseInt(el[4], 10)),\n          type: 'line',\n          name: `${\n            stockList.find((el) => el.code === stockCode).name\n          }/${stockCode}`,\n        },\n      ];\n      stockDataPercent.series = [\n        ...stockDataPercent.series,\n        {\n          data: stock\n            .slice(1, length - 1)\n            .map((el) => getPercent(targetDateValue, parseInt(el[4], 10))),\n          type: 'line',\n          name: `${\n            stockList.find((el) => el.code === stockCode).name\n          }/${stockCode}`,\n        },\n      ];\n      stockDataRelative.series = [\n        ...stockDataRelative.series,\n        {\n          data: stock\n            .slice(1, length - 1)\n            .map((el) => getRelative(maxValue, minValue, parseInt(el[4], 10))),\n          type: 'line',\n          name: `${\n            stockList.find((el) => el.code === stockCode).name\n          }/${stockCode}`,\n        },\n      ];\n\n      setOption(stockData);\n      setOptionPercent(stockDataPercent);\n      setOptionRelative(stockDataRelative);\n      setLoaded(true);\n    };\n\n    getData();\n  }, [percentTargetDate, startDate, stockCode]);\n\n  const onChartClick = (params) => {\n    const { name } = params;\n    setPercentTargetDate(name);\n  };\n\n  const handleChange = (e) => {\n    const date = e.target.value;\n    if (date.length === 10) {\n      const newDate = new Date(date);\n      const today = new Date();\n      const _chartStartDate = new Date(chartStartDate);\n      if (+newDate >= +_chartStartDate && +newDate <= +today) {\n        setPercentTargetDate(date);\n        setStartDate(date);\n      }\n    }\n  };\n  return (\n    <Container>\n      <>시작 날짜가 휴일인 경우에는 그래프가 비어 보입니다.(TODO)</>\n      <MaskingInput\n        mask={[\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n        ]}\n        type=\"text\"\n        name=\"startDate\"\n        value={startDate}\n        required\n        onChange={handleChange}\n        label=\"시작 날짜\"\n        placeholder=\"8자리 숫자 입력(2015-01-02)\"\n      />\n      <br />\n      <br />\n      {isLoaded && (\n        <>\n          종가 그래프( Y축 : 기간 내 최저가 ~ 최고가)\n          <StockChart\n            chartData={option}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n      {isLoaded && (\n        <>\n          {percentTargetDate}일( 기준일 = 0% ) 대비 상승/하락 률 ( 그래프 클릭\n          날짜 변경 )\n          <StockChart\n            chartData={optionPercent}\n            onEvents={{\n              click: onChartClick,\n            }}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n      {isLoaded && (\n        <>\n          최저가(0%) / 최고가(100%) 대비 그래프\n          <StockChart\n            chartData={optionRelative}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default Stock;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState } from 'react';\n\nimport { stockList } from 'constants/stock';\nimport { chartOption } from 'constants/chart';\nimport { fetchStockDataFromCsv } from 'services/stock';\nimport StockChart from 'components/StockChart/StockChart';\n\nimport { Container } from './Dashboard.styles';\n\nconst Dashboard = () => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionHigh, setOptionHigh] = useState({\n    ...chartOption,\n  });\n  const [optionExtraHigh, setOptionExtraHigh] = useState({\n    ...chartOption,\n  });\n  const [optionLow, setOptionLow] = useState({\n    ...chartOption,\n  });\n\n  useEffect(() => {\n    const stockData = { ...chartOption };\n    const stockDataHigh = { ...chartOption };\n    const stockDataExtraHigh = { ...chartOption };\n    const stockDataLow = { ...chartOption };\n    const fetchAllData = [];\n\n    stockList\n      .map((el) => el.code)\n      .forEach(async (number) => {\n        fetchAllData.push(fetchStockDataFromCsv(number));\n      });\n\n    Promise.all(fetchAllData).then((data) => {\n      data.forEach(({ data: stock }, index) => {\n        const { length } = stock;\n        const priceList = stock\n          .slice(1, length - 1)\n          .map((el) => parseInt(el[4], 10));\n\n        const mean = (Math.min(...priceList) + Math.max(...priceList)) / 2;\n        const ref =\n          // eslint-disable-next-line no-nested-ternary\n          mean > 400000\n            ? stockDataExtraHigh\n            : // eslint-disable-next-line no-nested-ternary\n            mean > 200000\n            ? stockDataHigh\n            : mean < 50000\n            ? stockDataLow\n            : stockData;\n\n        ref.xAxis = {\n          ...ref.xAxis,\n          data: stock.slice(1, length - 1).map((el) => el[0]),\n        };\n\n        ref.yAxis = {\n          ...ref.yAxis,\n        };\n\n        ref.series = [\n          ...ref.series,\n          {\n            data: stock.slice(1, length - 1).map((el) => parseInt(el[4], 10)),\n            type: 'line',\n            name: `${stockList[index].name}/${stockList[index].code}`,\n          },\n        ];\n      });\n      setOption(stockData);\n      setOptionHigh(stockDataHigh);\n      setOptionExtraHigh(stockDataExtraHigh);\n      setOptionLow(stockDataLow);\n      setLoaded(true);\n    });\n  }, []);\n\n  return (\n    <Container>\n      {isLoaded && <StockChart chartData={optionExtraHigh} />}\n      {isLoaded && <StockChart chartData={optionHigh} />}\n      {isLoaded && <StockChart chartData={option} />}\n      {isLoaded && <StockChart chartData={optionLow} />}\n    </Container>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const AppBody = styled.div`\n  height: 100%;\n`;\n","import React from 'react';\nimport { BrowserRouter, Redirect, Switch } from 'react-router-dom';\nimport { GlobalTheme } from 'remember-ui';\n\nimport Routes from 'routers//routes';\nimport CommonRoute from 'routers/CommonRoute';\nimport NavBar from 'components/NavBar/NavBar';\nimport Stock from 'pages/Stock/Stock';\nimport Dashboard from 'pages/Dashboard/Dashboard';\n\nimport { AppBody } from './App.styles';\n\nfunction App() {\n  const { root, stock } = Routes;\n\n  return (\n    <BrowserRouter>\n      <AppBody>\n        <GlobalTheme />\n        <NavBar />\n        <Switch>\n          <CommonRoute path={stock.path}>\n            <Stock />\n          </CommonRoute>\n          <CommonRoute path={root.path}>\n            <Dashboard />\n          </CommonRoute>\n          <Redirect to={root.path} />\n        </Switch>\n      </AppBody>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}